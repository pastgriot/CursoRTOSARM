/**
  ******************************************************************************
  * @file    main.c
  * @author  Ac6
  * @version V1.0
  * @date    01-December-2013
  * @brief   Default main function.
  ******************************************************************************
*/


//standard C includes
#include <stdio.h>
#include <stdint.h>
#include <string.h>
// stm32 specific includes
#include "stm32f30x.h"
#include "stm32f3_discovery.h"
//RTOS includes
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"


//MACROS varias
#define FALSE 0
#define TRUE 1

#define LED_ON_COMMAND				1
#define LED_OFF_COMMAND				2
#define LED_TOGGLE_COMMAND			3
#define LED_TOGGLE_STOP_COMMAND		4
#define LED_READ_STATUS				5
#define RTC_READ_DATE_TIME_COMMAND	6


//variables globales
char usr_msg[250];
uint8_t command_buffer[20];
uint8_t command_len = 0;

char menu[]={"\
\r\nLED_ON				----> 1 \
\r\nLED_OFF				----> 2 \
\r\nLED_TOGGLE			----> 3 \
\r\nLED_TOGGLE_OFF		----> 4 \
\r\nLED_READ_STATUS		----> 5 \
\r\nLED_PRINT_DATETIME	----> 6 \
\r\nEXIT_APP			----> 0 \
\r\nType your option here : "};


typedef struct APP_CMD
{

	uint8_t COMMAND_NUM;
	uint8_t COMNAND_ARGS[10];

}APP_CMD_t;

//normal function prototypes
static void prvSetupHardware(void);
static void prvSetupUART(void);
static void prvSetupGPIO(void);
void printmsg(char *msg);
void rtos_delay(uint32_t delay_in_ms );
uint8_t getCommandCode(uint8_t *buffer);
void getArguments(uint8_t *buffer);


void make_led_on(void);
void make_led_off(void);
void make_led_toggle_start(void);
void make_led_toggle_stop(void);
void read_led_status (char *task_msg);
void read_rtc_info(char *task_msg);
void print_error_mesagge(char *task_msg);

/************ RTOS Stuff ****************/

//task function prototypes.
void vTask1_menu_display(void *params);
void vTask2_cmd_handling(void *params);
void vTask3_cmd_processing(void *params);
void vTask4_UART_write(void *params);

QueueHandle_t command_queue = NULL;
QueueHandle_t uart_write_queue = NULL;

TaskHandle_t xTaskHandle1 = NULL;
TaskHandle_t xTaskHandle2 = NULL;
TaskHandle_t xTaskHandle3 = NULL;
TaskHandle_t xTaskHandle4 = NULL;


int main(void)
{
	DWT->CTRL	|=(1<<0); //Enable  CYNNT in DWT_CRL

	//1. resetea la configuracion RCC al estado de reset default
	//HSI On, PLL off, HSE off, system Clock = 8MHz, CPU Clock = 8  MHz
	RCC_DeInit();

	//2. actualiza la variable SystemCoreClock
	SystemCoreClockUpdate();

	prvSetupHardware();

	sprintf(usr_msg,"Demo de proceso de Queue\r\n");
	printmsg(usr_msg);


	//Creaci+on de command queue
	command_queue = xQueueCreate(10,sizeof(APP_CMD_t*));
	//Creaci+on de write queue
	uart_write_queue = xQueueCreate(10,sizeof(char*));


	if((command_queue != NULL) && (uart_write_queue != NULL))
	{

		//.3 Creo task -1
		xTaskCreate(vTask1_menu_display,"TASK1-MENU", 500, NULL,
				1, &xTaskHandle1 );
		//.3 Creo task -2
		xTaskCreate(vTask2_cmd_handling,"TASK2-CMD-HANDLING", 500, NULL,
				1, &xTaskHandle2 );
		//.3 Creo task -3
		xTaskCreate(vTask3_cmd_processing,"TASK3-CMD-PROCESS", 500, NULL,
				1, &xTaskHandle3 );
		//.3 Creo task -4
		xTaskCreate(vTask4_UART_write,"TASK4-UART-WRITE", 500, NULL,
				1, &xTaskHandle4 );

		//.4 Inicio el scheduler RTOS
		vTaskStartScheduler();
	}
	else{
		sprintf(usr_msg,"Queue creation failed\r\n");
		printmsg(usr_msg);
	}
	for(;;);
}


void vTask1_menu_display(void *params)
{
	char *pData = menu;
	while(1)
	{
		//envio string menu al queue uart write
		xQueueSend(uart_write_queue,&pData,portMAX_DELAY);
		//espera hasta que alguien notifique
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
	}
}


void vTask2_cmd_handling(void *params)
{
	uint8_t command_code = 0;
	APP_CMD_t *new_cmd;

	while(1)
	{
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
		//1. envia comando a la cola
		command_code = getCommandCode(command_buffer);
		new_cmd = (APP_CMD_t*) pvPortMalloc(sizeof(APP_CMD_t));
		new_cmd->COMMAND_NUM = command_code;
		getArguments(new_cmd->COMNAND_ARGS);

		xQueueSend(command_queue,&new_cmd,portMAX_DELAY);
	}
}

void vTask3_cmd_processing(void *params)
{
	APP_CMD_t *new_cmd;
	char task_msg [50];

	while(1)
	{
		xQueueReceive(command_queue,(void*)&new_cmd,portMAX_DELAY);

		if(new_cmd->COMMAND_NUM == LED_ON_COMMAND)
		{
			make_led_on();
		}
		else if(new_cmd->COMMAND_NUM == LED_OFF_COMMAND)
		{
			make_led_off();
		}
		else if(new_cmd->COMMAND_NUM == LED_TOGGLE_COMMAND)
		{
			make_led_toggle_start();
		}
		else if(new_cmd->COMMAND_NUM == LED_TOGGLE_STOP_COMMAND)
		{
			make_led_toggle_stop();
		}
		else if(new_cmd->COMMAND_NUM == LED_READ_STATUS)
		{
			read_led_status (task_msg);
		}
		else if(new_cmd->COMMAND_NUM == RTC_READ_DATE_TIME_COMMAND)
		{
			read_rtc_info(task_msg);
		}
		else
		{
			print_error_mesagge(task_msg);
		}
	}

}

void vTask4_UART_write(void *params)
{
	char *pData = NULL;

	while(1)
	{
		xQueueReceive(uart_write_queue,&pData,portMAX_DELAY);
		printmsg(pData);
	}
}

static void prvSetupHardware(void){

	//Setup GPIO
	prvSetupGPIO();

	//Setup UART1
	prvSetupUART();


}

static void prvSetupUART(void){

	GPIO_InitTypeDef gpio_uart_pins;
	USART_InitTypeDef uart2_init;

	//1. Habilitar UART Peripheral Clock y PortC Peripheral Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);

	//2. Configuro pines como UART  Rx = PA3 y Tx = PA2

	gpio_uart_pins.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
	gpio_uart_pins.GPIO_Mode = GPIO_Mode_AF;
	gpio_uart_pins.GPIO_PuPd = GPIO_PuPd_UP;

	GPIO_Init(GPIOA, &gpio_uart_pins);

	//3. Configuro Alt. function para USART2 en Pin 4 y Pin 5
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_7);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_7);

	//4. Inicialización USART2

	//limpio las estructuras por si hay basura
	memset(&uart2_init,0,sizeof(uart2_init));
	uart2_init.USART_BaudRate = 115200;
	uart2_init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	uart2_init.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
	uart2_init.USART_Parity = USART_Parity_No;
	uart2_init.USART_StopBits = USART_StopBits_1;
	uart2_init.USART_WordLength = USART_WordLength_8b;

	//habilito interrupción llegada datos uart2
	USART_ITConfig(USART2,USART_IT_RXNE,ENABLE);

	//configuro prioriodad interrupcion uart
    NVIC_SetPriority(USART2_IRQn,5); //mayor a configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY a 5
    NVIC_EnableIRQ(USART2_IRQn);

	//5. Enable USART2 periph

	USART_Init(USART2, &uart2_init);
	USART_Cmd(USART2, ENABLE);
}

static void prvSetupGPIO(void){

	//board specific
	GPIO_InitTypeDef led_init, button_init;

	//1. Habilitar PortA (boton) Peripheral Clock

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);


	//2. Configuro e inicio LED pin 9 gpio E como salida pushpull, slow speed
	led_init.GPIO_Mode = GPIO_Mode_OUT;
	led_init.GPIO_OType = GPIO_OType_PP;
	led_init.GPIO_Pin = GPIO_Pin_9 ;  //LED 3
	led_init.GPIO_Speed = GPIO_Speed_50MHz;
	led_init.GPIO_PuPd = GPIO_PuPd_NOPULL;

	GPIO_Init(GPIOE, &led_init);

	//3. habilito PortE (led) Peripheral Clock y APB2 reloj para SYSCFG (interrupción del pín)
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

	//4. Configuro e inicio botton pin 0 gpio A como Entrada

	button_init.GPIO_Mode = GPIO_Mode_IN;
	button_init.GPIO_Pin = GPIO_Pin_0 ;  //button_0
	button_init.GPIO_Speed = GPIO_Speed_50MHz;
	button_init.GPIO_PuPd = GPIO_PuPd_NOPULL;

	GPIO_Init(GPIOA, &button_init);

	//5. Interrupcion config para boton PA0

    // Connect Button EXTI Line to Button GPIO Pin
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);

    EXTI_InitTypeDef EXTI_InitStructure;

    // Configure Button EXTI line
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    EXTI_Init(&EXTI_InitStructure);

    //6. Configuracion NVIC
    NVIC_SetPriority(EXTI0_IRQn,5);
    NVIC_EnableIRQ(EXTI0_IRQn);
}

void printmsg(char *msg){

	for (uint32_t i = 0;i < strlen(msg);i++){
		while (USART_GetFlagStatus(USART2,USART_FLAG_TXE) != SET);
		USART_SendData(USART2, msg[i]);
	}
}

void rtos_delay(uint32_t delay_in_ms)
{
	uint32_t current_tick_count = xTaskGetTickCount();
	uint32_t delay_int_ticks = (delay_in_ms * configTICK_RATE_HZ)/1000;

	while(xTaskGetTickCount() < (current_tick_count + delay_int_ticks));

}

uint8_t getCommandCode(uint8_t *buffer)
{
	return buffer[0]-48;
}

void getArguments(uint8_t *buffer)
{

}

void make_led_on(void)
{
	GPIO_WriteBit(GPIOE,GPIO_Pin_9, SET);
}

void make_led_off(void)
{
	GPIO_WriteBit(GPIOE,GPIO_Pin_9, RESET);
}

void make_led_toggle_start(void)
{


}

void make_led_toggle_stop(void)
{

}

void read_led_status(char *task_msg)
{
	sprintf(task_msg, "\r\nLED Status is : %d\n\r", GPIO_ReadOutputData(GPIOE));
	xQueueSend(uart_write_queue,&task_msg,portMAX_DELAY);
}

void read_rtc_info(char *task_msg)
{

}

void print_error_mesagge(char *task_msg)
{
	sprintf(task_msg, "\r\nInvalid Command Received\n\r");
	xQueueSend(uart_write_queue,&task_msg,portMAX_DELAY);
}

void USART2_IRQHandler()
{
	uint8_t data_byte;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;

	if(USART_GetFlagStatus(USART2,USART_FLAG_RXNE))
	{
		//se ha recibido un dato (byte)
		data_byte = USART_ReceiveData(USART2);
		command_buffer[command_len++] = data_byte & 0xFF;

		if(data_byte == '\r')
		{
			xTaskGenericNotifyFromISR(xTaskHandle2,0,0,eNoAction,&xHigherPriorityTaskWoken);
			xTaskGenericNotifyFromISR(xTaskHandle1,0,0,eNoAction,&xHigherPriorityTaskWoken);
		}
	}

	if(xHigherPriorityTaskWoken)
	{
		taskYIELD();
	}
}




